####  + B. Separated bands
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
#source("functions_extract.R") #Check that this file is in the working directory
#require(raster)
algo <- function(){
tryCatch({ ## Put it all inside a handle error function Trycatch
print ("################# Inicio de script ##################")
## Read inputs.
args <- commandArgs(TRUE)
## Ask user the list of rasters and zone vectors
#in_mode <- menu(c("Stack bands", "Unstack bands"), title="What do you want to do with the images?",graphics = TRUE);
in_mode <- readline("Select 1: stack, 2:unstack");
if (in_mode == 1){ #### Stack bands
#Process every set of band to join in one raster
for (i in 1:1) {
#s <- stackSeq(name,path)
print("opt 1")
}
} else if (in_mode == 2){ #### Unstack bands
for (i in 1:1) {
## unstack
print("opt2")
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
}
algo()
source('F:/Dropbox (RSG)/Software/Scripts/r/image_processing_aux/stack_unstack_bands_cmd.R')
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("..\functions_ImgProcessing.R") #Check that this file is in the working directory
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("../functions_ImgProcessing.R") #Check that this file is in the working directory
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("../functions_ImgProcessing.R") #Check that this file is in that directory
imgs <- chooseTifs()
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("../functions_ImgProcessing.R") #Check that this file is in that directory
imgs <- chooseTifs()
imgs <- chooseTifs()
#### setwd() You can set the Working directory to the source file location
#### Get functions and libraries
source("../functions_ImgProcessing.R") #Check that this file is in that directory
imgs <- chooseTifs()
imgs
imgs <- chooseTifs()
imgs
imgs <- chooseTifs()
imgs <- chooseTifs()
imgs
l.packages(c("rgdal","raster","velox"))
require(raster)
require(rgdal)
require(velox)
#### Get functions and libraries
source("..\\functions_ImgProcessing.R") #Check that the function file is in the same Working directory
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP") #Select plots shapefile
img_name <- roi_name
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP\\") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP\\") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP\\") #Select plots shapefile
roi_name <- choose.files("C:\\Dropbox\\RS_SIP\\")
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files("C:\\Dropbox\\RS_SIP") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP\\") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP\\") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP") #Select plots shapefile
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP") #Select plots shapefile
View(getTop5percInsideROIandRemoveFR)
roi_name
######################## DEFINE VARIABLES (Enter your variables)
#roi_name<- "d30__ae__roi" #Fix shp name
roi_name <- choose.files(default="C:\\Dropbox\\RS_SIP") #Select plots shapefile
roi <- shapefile(roi_name)
img <- raster(img_name)
roi$data
roi
plot(roi)
coordinates(roi)
plot(coordinates(roi),add=TRUE)
plot(roi)
plot(coordinates(roi), add = TRUE)
plot(roi)
plot(coordinates(roi), add = TRUE)
roi@data
roi
dim(roi)
i <-1
roi[i,]
roi@data[i,1]
outFolder <- choose.dir()
outFolder
tryCatch({
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)){
#crop
r_cr<-crop(img, extent(roi[i,]), snap="out") #execute script, crop by roi
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1])
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}
})
outFilename
outName <- gsub("/", "-", outName)#Remove backslash from name
outName
outName <- paste(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1],sep="_")
outName <- gsub("/", "-", outName)#
outName
tryCatch({
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)){
#crop
r_cr<-crop(img, extent(roi[i,]), snap="out") #execute script, crop by roi
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}
})
plot(img)
#crop
r_cr<-crop(img, roi[i,], snap="out") # crop by roi
r_cr
plot(r_cr)
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
plot(r_cr_mk)
img <- stack(img_name)
tryCatch({
#loop for all the plots to crop, one by one and by each image band
for (i in 1:dim(roi)){
#crop
r_cr<-crop(img, extent(roi[i,]), snap="out") # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}
})
tryCatch({
#loop for all the plots to crop, one by one and by each image band
for (i in 1:dim(roi)){
#crop
r_cr<-crop(img, extent(roi[i,]), snap="out") # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}
})
img <- velox(img_name)
plot(img)
img <- velox(img_name)
img
img <- velox(stack(img_name)) # get multiband image as a velox object (faster processing)
#to crop, get a copy of the full image
r_cr <- img
img$crop(extent(roi[i,])) # crop by roi
plot(r_cr)
r_cr
class(r_cr)
img <- velox(stack(img_name)) # get multiband image as a velox object (faster processing)
#to crop, get a copy of the full image
r_cr <- img
r_cr$crop(extent(roi[i,])) # crop by roi
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
stack(img_name)
class(r_cr)
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
VeloxRaster_write(outFilename,overwrite=FALSE)
r_cr$VeloxRaster_write(outFilename,overwrite=FALSE) #save velox object
r_cr$write(outFilename,overwrite=FALSE) #save velox object
r_cr$write(outFilename,overwrite=FALSE) #save velox object
r_cr$write(outFilename,overwrite=FALSE) #save velox object
r_cr$write(outFilename,overwrite=FALSE) #save velox object
img <- brick(img_name) # get multiband image as a velox object (faster processing)
#to crop
r_cr <- r_cr$crop(extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
r_cr
img_name
img <- stack(img_name) # get multiband image as a velox object (faster processing)
r_cr <- r_cr$crop(extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#M
img <- brick(img_name) # get multiband image as a velox object (faster processing)
img
#to crop
r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
writeRaster(r_cr, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
writeRaster(r_cr_mk, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
writeRaster(r_cr_mk, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
img@file$nbands
img@file@nbands
img_full <- brick(img_name) # get multiband image as a velox object (faster processing)
img_full <- brick(img_name) # get multiband image as a velox object (faster processing)
tryCatch({
#Iterate all the bands of the raster
for (b in 1:img@file@nbands) {
img <- img_full[[b]]
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)){
#to crop
r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),"B",b,roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFilename <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk, file=outFilename,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}#For plots
}#For bands
})#Try
img <- brick(img_name) # get multiband image as a velox object (faster processing)
r_cr_mk[[b]]
img <- brick(img_name) # get multiband image as a velox object (faster processing)
tryCatch({
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)){
#to crop
r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#save the bands of the raster separately
for (b in 1:img@file@nbands) {
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste(tools::file_path_sans_ext(basename(img_name)),"B",b,roi@data[i,1],sep="_")
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFile <- file.path(outFolder,paste0(outName,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk[[b]], file=outFile,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFilename," Succesfully"))
}
}#For plots
})#Try
dim(roi)
dim(roi)[1]
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(tools::file_path_sans_ext(basename(img_name)),"B",b,"_",roi@data[i,1])
outName
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
outName
data <- read.csv(choose.files("C:\\Dropbox\\RS_SIP"))
data
gdata <- data
gdata
gdata[data[1,] == roi@data[i,1],]
gdata[data[2,] == roi@data[i,1],]
roi@data[i,1]
gdata[data[2,]
]
gdata[gdata[2,] == roi@data[i,1],]
gdata[gdata[2,]
gdata[2,]
gdata[2,]
gdata[gdata[,2] == roi@data[i,1],]
iname <- tools::file_path_sans_ext(basename(img_name)) #Basename of the image to name the outputs
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
write.csv(gdata[gdata[,2] == roi@data[i,1],],outFileData) # Hare compare the ID in column 1 and 2 (because thy are switched)
outName
iname
roi@data[i,1]
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(iname,"_",roi@data[i,1])
outName
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
write.csv(gdata[gdata[,2] == roi@data[i,1],],outFileData, row.names = FALSE) #compare the ID in column 1 and 2 (because thy are switched)
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
write.csv(gdata[gdata[,2] == roi@data[i,1],],outFileData, row.names = FALSE) #compare the ID in column 1 and 2 (because thy are switched)
gdata_name <- choose.files("C:\\Dropbox\\RS_SIP") #get ground table data
gdata <- read.csv(gdata_name) #Load the ground data text file, first column is the ID
tryCatch({
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)[1]){
#to crop
r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#save the bands of the raster separately
for (b in 1:img@file@nbands) {
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(iname,"_",roi@data[i,1])
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFile <- file.path(outFolder,paste0(outName,"_B",b,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk[[b]], file=outFile,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFile," Succesfully"))
}#For bands
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
plot_data <- gdata[gdata[,1] == roi@data[i,1],]#compare the ID in column 1 shapefile-table
write.csv(plot_data,outFileData, row.names = FALSE) #write table in disk
}#For plots
})#Try
tryCatch({
start.time <- Sys.time() #Check when the tool starts
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)[1]){
#to crop
r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#save the bands of the raster separately
for (b in 1:img@file@nbands) {
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(iname,"_",roi@data[i,1])
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFile <- file.path(outFolder,paste0(outName,"_B",b,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk[[b]], file=outFile,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFile," Succesfully"))
}#For bands
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
plot_data <- gdata[gdata[,1] == roi@data[i,1],]#compare the ID in column 1 shapefile-table
write.csv(plot_data,outFileData, row.names = FALSE) #write table in disk
}#For plots
end.time <- Sys.time()
time.taken <- end.time - start.time #Count the time past
print (time.taken) #print time
})#Try
#to crop
vimg <- velox(img)
r_cr <- vimg$crop(extent(roi[i,]))
r_cr$as.rasterBrick()
r_cr
vimg
vimg$as.rasterBrick()
vimg$as.rasterStack()
require("velox")
class(vimg)
vimg$as.rasterStack()
vimg$as.RasterStack()
r_cr <- vimg$as.RasterStack()
#-#r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#Error handling try
tryCatch({
start.time <- Sys.time() #Check when the tool starts
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)[1]){
#to crop
vimg <- velox(img)
vimg$crop(extent(roi[i,]))
r_cr <- vimg$as.RasterStack()
#-#r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#save the bands of the raster separately
for (b in 1:img@file@nbands) {
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(iname,"_",roi@data[i,1])
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFile <- file.path(outFolder,paste0(outName,"_B",b,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk[[b]], file=outFile,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFile," Succesfully"))
}#For bands
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
plot_data <- gdata[gdata[,1] == roi@data[i,1],]#compare the ID in column 1 shapefile-table
write.csv(plot_data,outFileData, row.names = FALSE) #write table in disk
}#For plots
end.time <- Sys.time()
time.taken <- end.time - start.time #Count the time past
print (time.taken) #print time
})#Try
vimg_ <- velox(img)
tryCatch({
start.time <- Sys.time() #Check when the tool starts
#loop for all the plots to crop, one by one
for (i in 1:dim(roi)[1]){
#to crop
vimg <- vimg_
vimg$crop(extent(roi[i,]))
r_cr <- vimg$as.RasterStack()
#-#r_cr <- crop(img, extent(roi[i,])) # crop by roi
r_cr_mk <- mask(r_cr,roi[i,])#Mask to remove what is outside the poligon and inside the rectangular extents
#save the bands of the raster separately
for (b in 1:img@file@nbands) {
#name for output file. use the img name and the first column of the shapefile data as ID
outName <- paste0(iname,"_",roi@data[i,1])
outName <- gsub("/", "_", outName)#Remove backslash from name (if there was inside the 1st column data)
#Name and Save file
outFile <- file.path(outFolder,paste0(outName,"_B",b,".tif"),fsep=.Platform$file.sep)
writeRaster(r_cr_mk[[b]], file=outFile,datatype='FLT4S',format="GTiff",overwrite=FALSE)
#inform about saving
print(paste("saved raster:",outFile," Succesfully"))
}#For bands
## Save the data of this plot in a text file, matching with the ID in the table
outFileData <- file.path(outFolder,paste0(outName,".csv"),fsep=.Platform$file.sep)
plot_data <- gdata[gdata[,1] == roi@data[i,1],]#compare the ID in column 1 shapefile-table
write.csv(plot_data,outFileData, row.names = FALSE) #write table in disk
}#For plots
end.time <- Sys.time()
time.taken <- end.time - start.time #Count the time past
print (time.taken) #print time
})#Try
mask(vimg,roi[i,])
print (Sys.time() - start.time) #print time
