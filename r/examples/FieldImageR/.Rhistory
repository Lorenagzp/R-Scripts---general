### The output folder is created based on the name of the autopano file, inside the
### Use the full path to reference images in the pano file.
### TODO: implement error catching in the script
####################################################### FUNCTIONS DEFINITION
source(file.path("C:","Dropbox","Software","Scripts","r","functions_imgProcessing.R", fsep = .Platform$file.sep))
### INPUTS
panoF <- choose.files(caption = "Selecciona el archivo de autopano",filters = matrix(c("pano", "*.pano")),
index = nrow(Filters)) # Choose the autopano *.pano file that is using the images of interest
### SCRIPT
separate_img_in_folder_from_pano_file(panoF)
### Script to separate the files from the thermal imagery that correspond to a specific area, based on the autopano mosaic file.
### The output folder is created based on the name of the autopano file, inside the
### Use the full path to reference images in the pano file.
### TODO: implement error catching in the script
####################################################### FUNCTIONS DEFINITION
source(file.path("C:","Dropbox","Software","Scripts","r","functions_imgProcessing.R", fsep = .Platform$file.sep))
### INPUTS
panoF <- choose.files(caption = "Selecciona el archivo de autopano",filters = matrix(c("pano", "*.pano")),
index = nrow(Filters)) # Choose the autopano *.pano file that is using the images of interest
### SCRIPT
separate_img_in_folder_from_pano_file(panoF)
### Script to separate the files from the thermal imagery that correspond to a specific area, based on the autopano mosaic file.
### The output folder is created based on the name of the autopano file, inside the
### Use the full path to reference images in the pano file.
### TODO: implement error catching in the script
####################################################### FUNCTIONS DEFINITION
source(file.path("C:","Dropbox","Software","Scripts","r","functions_imgProcessing.R", fsep = .Platform$file.sep))
### INPUTS
panoF <- choose.files(caption = "Selecciona el archivo de autopano",filters = matrix(c("pano", "*.pano")),
index = nrow(Filters)) # Choose the autopano *.pano file that is using the images of interest
### SCRIPT
separate_img_in_folder_from_pano_file(panoF)
### Script to separate the files from the thermal imagery that correspond to a specific area, based on the autopano mosaic file.
### The output folder is created based on the name of the autopano file, inside the
### Use the full path to reference images in the pano file.
### TODO: implement error catching in the script
####################################################### FUNCTIONS DEFINITION
source(file.path("C:","Dropbox","Software","Scripts","r","functions_imgProcessing.R", fsep = .Platform$file.sep))
### INPUTS
panoF <- choose.files(caption = "Selecciona el archivo de autopano",filters = matrix(c("pano", "*.pano")),
index = nrow(Filters)) # Choose the autopano *.pano file that is using the images of interest
### SCRIPT
separate_img_in_folder_from_pano_file(panoF)
load("E:/AG/190416/e/e190416_metadata.RData")
##to do: remove images with NA (if error ocurred)++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ EDITING
## Get the coordinates and image name for each picture
imgfileName <- as.data.frame(meta$SourceFile) #filenames of each image
lat_long <- as.data.frame(meta[,c("GPSLongitude","GPSLatitude")]) # Data frame of the coordinates
##to do: remove images with NA (if error ocurred) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Editing ends
img_geotagg <- SpatialPointsDataFrame(lat_long, #Coords
imgfileName, #Data i.e.
proj4string = CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")) #CRS
#view features
#plot(roi)
#plot(img_geotagg,add=TRUE)
## For RedEdge camera imagery
#April 2019
############################issues arrised. Check code
### Librarys
require(rgdal) #for intersect!
require(exiftoolr) #metadata
#require(rgeos) #for intersect?
img_geotagg <- SpatialPointsDataFrame(lat_long, #Coords
imgfileName, #Data i.e.
proj4string = CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")) #CRS
#view features
#plot(roi)
##to do: remove images with NA (if error ocurred)++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ EDITING
## Get the coordinates and image name for each picture
imgfileName <- as.data.frame(meta$SourceFile) #filenames of each image
roi_location = file.path("C:","Dropbox", "data","AG","vectoriales", fsep = .Platform$file.sep)
roi_name= "ag_calor_synt"
roi <- readOGR(dsn = roi_location, layer = roi_name)
#Reproject to have on the same CRS as the images
roi <- spTransform(roi,CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
##to do: remove images with NA (if error ocurred)++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ EDITING
## Get the coordinates and image name for each picture
imgfileName <- as.data.frame(meta$SourceFile) #filenames of each image
filter <- !is.na(imgfileName) #get a boolean list of what is data and what has NA's
imgfileName <- imgfileName[filter[,1],] # Remove the records with NA's in the coordinates
lat_long <- as.data.frame(meta[,c("GPSLongitude","GPSLatitude")]) # Data frame of the coordinates
lat_long <- lat_long[filter[,1],] #Avoid frames with NAs
filter2 <- !is.na(lat_long)
lat_long <- lat_long[filter2[,1],] #Avoid frames with NAs
imgfileName <- as.data.frame(imgfileName[filter2[,1]]) # Remove the records with NA's in the coordinates
##to do: remove images with NA (if error ocurred) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Editing ends
img_geotagg <- SpatialPointsDataFrame(lat_long, #Coords
imgfileName, #Data i.e.
proj4string = CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")) #CRS
#view features
#plot(roi)
#plot(roi)
#plot(img_geotagg,add=TRUE)
# Get points that fall inside the ROI polygon
in_poly_img <- raster::intersect(img_geotagg, roi) # get point candidates, that match the target ROI polygon area
#in_poly_img_list <- as.character(in_poly_img$imgfileName) #list of file names that match
in_poly_img_list <- as.character(in_poly_img$`meta$SourceFile`) #list of file names that match . ^Having some troubles matching the data types of the functions
message(length(in_poly_img_list)," images are inside the polygon ",roi_name)
plot(roi)
plot(lat_long,add=TRUE)
str(roi)
plot(roi,add=TRUE)
plot(img_geotagg)
# Get points that fall inside the ROI polygon
in_poly_img <- raster::intersect(img_geotagg, roi) # get point candidates, that match the target ROI polygon area
#in_poly_img_list <- as.character(in_poly_img$imgfileName) #list of file names that match
in_poly_img_list <- as.character(in_poly_img$`meta$SourceFile`) #list of file names that match . ^Having some troubles matching the data types of the functions
message(length(in_poly_img_list)," images are inside the polygon ",roi_name)
plot(roi,add=TRUE)
in_poly_img_list
in_poly_img$imgfileName
img_geotagg
roi
in_poly_img
in_poly_img_list <- as.character(in_poly_img$imgfileName)
in_poly_img_list
in_poly_img
in_poly_img$`meta$SourceFile`
in_poly_img_list <- as.character(in_poly_img$`imgfileName[filter2[, 1]]`)
message(length(in_poly_img_list)," images are inside the polygon ",roi_name)
## copy in-polygon images to separate folder
dir.create(file.path(wd,roi_name, fsep = .Platform$file.sep)) #create folder with the roi name in the same location as the image folder directory
files_copy <- file.copy(in_poly_img_list, roi_name) #can give this error "more 'from' files than 'to' files" if.. (when the folder is created one level upper than necessary)
#file.remove (in_poly_img_list) #you can delete after copy to "move"
message(sum(files_copy)," files moved to ", roi_name, " folder")
in_poly_img_list
wd
roi_name
files_copy <- file.copy(in_poly_img_list, roi_name) #can give this error "more 'from' files than 'to' files" if.. (when the folder is created one level upper than necessary {OR IF SOME IMAGES WERE MOVED?})
files_copy <- file.copy(in_poly_img_list, roi_name) #can give this error "more 'from' files than 'to' files" if.. (when the folder is created one level upper than necessary {OR IF SOME IMAGES WERE MOVED?})
files_copy <- file.copy(in_poly_img_list, wd) #can give this error "more 'from' files than 'to' files" if.. (when the folder is created one level upper than necessary {OR IF SOME IMAGES WERE MOVED?})
files_copy
warnings()
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
load("C:/pruebas/borrar/Shp_plots/.RData")
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp <- shapefile(file.choose()) #shapefile. The first column will be assumed to be "Name" #################################### NOTE ###########
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
#plt = c(0,1,0,1),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# setup layout
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0,1,0,1),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# setup layout
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp@data[,1]
str(r)
##Select raster and plots
r_filename <- choose.files(default =wd,multi =FALSE)
paste(r_filename,".jpg")
file_path_sans_ext(basename(r_filename))
tools::file_path_sans_ext(basename(r_filename))
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
mixedsort(shp@data[,1])
require("gtools") #sorting
mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# # # # #Check conditions and quality check needed to be implemented
#
# # # # # check Harcoded inputs every time.
#
####
#library(xlsx) #preferred to read XLSX?
library("XLConnect")
library(reshape2)
demo()
r_file
#############################################################
#### Functions to select specific format files
#### Libraries used:
install.packages(raster)
#############################################################
#### Functions to select specific format files
#### Libraries used:
install.packages("raster")
install.packages("devtools")
library(devtools)
install_github("filipematias23/FIELDimageR")
library(devtools)
install_github("filipematias23/FIELDimageR")
#install.packages("devtools")
library(devtools)
install_github("filipematias23/FIELDimageR")
devtools::install_github("filipematias23/FIELDimageR")
install.packages("digest")
#install.packages("devtools")
library(devtools)
devtools::install_github("filipematias23/FIELDimageR")
#install.packages("rgdal")
library(FIELDimageR)
library(raster)
require(raster)
r <- raster(choose.files())
require(raster)
r <- raster(choose.files())
library(raster)
r <- raster(choose.files())
install.packages("Rcpp")
install.packages("raster")
library(raster)
r <- raster(choose.files())
r <- raster(choose.files())
plot(r)
shp <- shapefile(choose.files())
r_crop <- crop(r,shp)
plot(r_crop)
p <- 6 + 208 (r)
p <- 6 + 208 * r # convert to protein
plot(p)
p <- 6 + 208 * r_crop # convert to protein
plot(p)
writeRaster(p,"C:\\temp\\important\\rotopixels prot\\elo_R550_3_p.tif")
library(FIELDimageR)
library(raster)
library(devtools)
devtools::install_github("filipematias23/FIELDimageR")
install.packages("yaml")
devtools::install_github("filipematias23/FIELDimageR")
library(FIELDimageR)
library(raster)
#Build the plot shapefile
EX1<-stack(choose.files()) # Load image
plotRGB(EX1, r = 1, g = 2, b = 3) #plot image
## You can remove soil, etc.
EX1.Shape<-fieldShape(mosaic = EX1,ncols = 3, nrows = 3) #Now generate the plots
EX1.Shape
plot(EX1.Shape)
setwd("F:/Dropbox (RSG)/Software/Scripts/r/examples")
setwd("F:/Dropbox (RSG)/Software/Scripts/r/examples/FieldImageR")
## Generate the plots field map
DataTable<-read.csv("DataTable.csv",header = T)
fieldMap<-fieldMap(fieldPlot=DataTable$Plot, fieldRange=DataTable$Range, fieldRow=DataTable$Row, decreasing=T)
DataTable<-read.csv("DataTable.csv",header = T)
fieldMap<-fieldMap(fieldPlot=DataTable$Plot, fieldRange=DataTable$Range, fieldRow=DataTable$Row, decreasing=T)
#Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1.RemSoil, ncols = 3, nrows = 3, fieldMap = fieldMap)
#Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1, ncols = 3, nrows = 3, fieldMap = fieldMap)
##Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1.RemSoil, ncols = 14, nrows = 9, fieldMap = fieldMap, fieldData = DataTable, ID = "Plot")
EX1.Shape
#EX1.Shape$fieldShape@data #Retrieve data
plotRGB(EX1.Shape$cropField)
EX1 <- EX1.Shape$cropField
plotRGB(EX1, r = 1, g = 2, b = 3) #plot image
##Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1, ncols = 3, nrows = 3, fieldMap = fieldMap, fieldData = DataTable, ID = "Plot")
##Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1, ncols = 3, nrows = 3, fieldMap = fieldMap, fieldData = DataTable, ID = "Plot")
##Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1, ncols = 3, nrows = 3, fieldMap = fieldMap, fieldData = DataTable, ID = "Plot")
EX1.Rotated<-fieldRotate(mosaic = EX1, clockwise = F)
EX1.Rotated<-fieldRotate(mosaic = EX1, clockwise = F) #Roteate the image
EX1.Rotated<-fieldRotate(mosaic = EX1, clockwise = F) #Roteate the image
EX1.Rotated<-fieldRotate(mosaic = EX1, clockwise = T) #Roteate the image
##Now generate the plots
EX1.Shape<-fieldShape(mosaic = EX1.Rotated, ncols = 3, nrows = 3, fieldMap = fieldMap, fieldData = DataTable, ID = "Plot")
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1)
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1[1])
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1(1))
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1[[1]]
)
plot(EX1.Shape$fieldShape,add=TRUE)
plot(EX1.Shape$fieldShape)
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1[[1]])
writeOGR(obj=torn, dsn="tempdir", layer="torn", driver="ESRI Shapefile")
library(rgdal)
writeOGR(obj=EX1.Shape$fieldShape, dsn="", layer="shp.shp", driver="ESRI Shapefile")
writeOGR(obj=EX1.Shape$fieldShape, dsn="z", layer="shp.shp", driver="ESRI Shapefile")
writeOGR(obj=EX1.Shape$fieldShape, dsn=".", layer="shp.shp", driver="ESRI Shapefile")
shape <- EX1.Shape$fieldShape
#EX1.Shape$fieldShape@data #Retrieve data
plot(EX1[[1]])
plot(shape, add= TRUE)
shape
plotRGB(EX1, r = 1, g = 2, b = 3) #plot image
EX1
plotRGB(EX1, r = 1, g = 2, b = 3) #plot image
#EX1.Shape$fieldShape@data #Retrieve data
##Plot
plot(EX1[[1]])
EX1 <- Ex1
EX1 <- EX1
plotRGB(EX1, r = 1, g = 2, b = 3) #plot image
