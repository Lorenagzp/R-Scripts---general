pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
load("C:/pruebas/borrar/Shp_plots/.RData")
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp <- shapefile(file.choose()) #shapefile. The first column will be assumed to be "Name" #################################### NOTE ###########
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:50){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp
par(mfrow=c(1,50),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins ##mfrow=c(1,20),
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
#plt = c(0,1,0,1),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# setup layout
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0,1,0,1),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# setup layout
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in 1:5){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n",
ann=FALSE,
mai = c(0,0,0,0),
mgp = c(0, 0, 0),
oma = c(0,0,0,0),
omd = c(0,1,0,1),
omi = c(0,0,0,0),
#pin = c(4,2),
#plt = c(0.0,0,0),
pty = "m",
xaxs = 'i',
xaxt = 'n',
xpd = FALSE,
yaxs = 'i',
yaxt = 'n') # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# layout the plots into a matrix w/ 12 columns, by row
for (i in shp@data[,1]){ #shp@data[,1]
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
shp@data[,1]
str(r)
##Select raster and plots
r_filename <- choose.files(default =wd,multi =FALSE)
paste(r_filename,".jpg")
file_path_sans_ext(basename(r_filename))
tools::file_path_sans_ext(basename(r_filename))
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
mixedsort(shp@data[,1])
require("gtools") #sorting
mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
list_plots <- mixedsort(shp@data[,1])
par(mfrow=c(1,100),mar=rep(0,4),xaxs='i', yaxs='i', bty="n") # no margins, 1 row and 100 columns
## set up the color scale
cuts=c(seq(3,4.5,0.03)) #set breaks according to raster min and max values, selected manually
pal <- colorRampPalette(c("#0083f5","#00fafe","#0ff14c","yellow","#f31700"))
# go through all the plots
for (i in list_plots){
plot_r <- crop(r, extent(shp[shp@data$Name == i,])) # crop the raster
plot(plot_r, col=pal(83),legend=FALSE,axes=FALSE,bty="n") # plot without axes and label #  # rev( rainbow( 99, start=0,end=0.7))
}
# # # # #Check conditions and quality check needed to be implemented
#
# # # # # check Harcoded inputs every time.
#
####
#library(xlsx) #preferred to read XLSX?
library("XLConnect")
library(reshape2)
demo()
r_file
#############################################################
#### Functions to select specific format files
#### Libraries used:
install.packages(raster)
#############################################################
#### Functions to select specific format files
#### Libraries used:
install.packages("raster")
install.packages("devtools")
library(devtools)
install_github("filipematias23/FIELDimageR")
library(devtools)
install_github("filipematias23/FIELDimageR")
#install.packages("devtools")
library(devtools)
install_github("filipematias23/FIELDimageR")
devtools::install_github("filipematias23/FIELDimageR")
install.packages("digest")
#install.packages("devtools")
library(devtools)
devtools::install_github("filipematias23/FIELDimageR")
#install.packages("rgdal")
library(FIELDimageR)
library(raster)
require(raster)
r <- raster(choose.files())
require(raster)
r <- raster(choose.files())
library(raster)
r <- raster(choose.files())
install.packages("Rcpp")
install.packages("raster")
library(raster)
r <- raster(choose.files())
r <- raster(choose.files())
plot(r)
shp <- shapefile(choose.files())
r_crop <- crop(r,shp)
plot(r_crop)
p <- 6 + 208 (r)
p <- 6 + 208 * r # convert to protein
plot(p)
p <- 6 + 208 * r_crop # convert to protein
plot(p)
writeRaster(p,"C:\\temp\\important\\rotopixels prot\\elo_R550_3_p.tif")
###################################################################################
#### Script to extract the values from multiband rasters (Tif, Tiff and BSQ) based on vector zones
#### Summarize the extracted pixels to give one value per zone
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate:
####    - the selected statistics
####    - ID Field name
####    - And outputs location
####
#### For  the outputs:
####  + CSV file per raster with all bands plot-values
#### Get functions and libraries
## First set the working directory to the location of this script
#setwd("C:\\")
source("functions_extract.R") #Check that the function file is in the same Working directory
# It needs this packages to be installed
#require(raster)
#require(velox)
#### Ask user where to put the output tables
#outFolder <- choose.dir(caption = "Select folder to save output tables")
outFolder <- ("C:\\temp\\r") # Set path fix
#### summarize using the selected function ("na" stands for: remove NA values)
# See the functions_extract.R
func <- median_na ## Summarize by median, remove NA values
#func <- mean_na ## Summarize by mean, remove NA values
#func <- sd_na ## Summarize by standard deviation, remove NA values
#func <- Q1_na ## Summarize by first quartile, remove NA values
#func <- Q3_na ## Summarize by third quartile, remove NA values
####Field in the shp table to use as identifier of the extracting features
ID_field <- "Name"
#### Start of script, will deploy the menu of options
tryCatch({ ## Put it all inside a handle error function
## Shapefile
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
####EXTRACT####
# run for every item in te list
for (i in 1:nrow(inputList)) {
print(paste("Processing list... ",inputList[i,1]))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],func,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, func, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "ACTION: Type the buffer size in meters (+Positive to grow, -negative to shrink the feature)"));
}
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$|\\.dat$") # Select Tif or BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing raster in folder... ",r_file))
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
print("Finish extracting")
},
#In case of halting error:
error = function(e){print(c("An error ocurred: ",e$message))}#,
# In case of warnings:
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
#### Get functions and libraries
## First set the working directory to the location of this script
#setwd("C:\\")
source("functions_extract.R") #Check that the function file is in the same Working directory
setwd("F:/Dropbox (RSG)/Software/Scripts/r/extract")
aster with all bands plot-values
#### Get functions and libraries
## First set the working directory to the location of this script
#setwd("C:\\")
source("functions_extract.R") #Check that the function file is in the same Working directory
# It needs this packages to be installed
#require(raster)
#require(velox)
#### Ask user where to put the output tables
#outFolder <- choose.dir(caption = "Select folder to save output tables")
outFolder <- ("C:\\temp\\r") # Set path fix
#### summarize using the selected function ("na" stands for: remove NA values)
# See the functions_extract.R
func <- median_na ## Summarize by median, remove NA values
#func <- mean_na ## Summarize by mean, remove NA values
#func <- sd_na ## Summarize by standard deviation, remove NA values
#func <- Q1_na ## Summarize by first quartile, remove NA values
#func <- Q3_na ## Summarize by third quartile, remove NA values
####Field in the shp table to use as identifier of the extracting features
ID_field <- "Name"
#### Start of script, will deploy the menu of options
tryCatch({ ## Put it all inside a handle error function
## Shapefile
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
####EXTRACT####
# run for every item in te list
for (i in 1:nrow(inputList)) {
print(paste("Processing list... ",inputList[i,1]))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],func,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, func, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "ACTION: Type the buffer size in meters (+Positive to grow, -negative to shrink the feature)"));
}
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$|\\.dat$") # Select Tif or BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing raster in folder... ",r_file))
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
print("Finish extracting")
},
#In case of halting error:
error = function(e){print(c("An error ocurred: ",e$message))}#,
# In case of warnings:
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
#### Ask user where to put the output tables
outFolder <- choose.dir(caption = "Select folder to save output tables")
#### Get functions and libraries
## First set the working directory to the location of this script
#setwd("C:\\")
source("functions_extract.R") #Check that the function file is in the same Working directory
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$|\\.dat$") # Select Tif or BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing raster in folder... ",r_file))
#extractThis(r_file,zones, outFolder,ID_field,func,buf)
extractThis(r_file,zones, outFolder,ID_field,func,buf,band_names=c("Blue","Red","Green","Red Edge","NIR")) #pass the band_names
}
}
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing raster in folder... ",r_file))
#extractThis(r_file,zones, outFolder,ID_field,func,buf)
extractThis(r_file,zones, outFolder,ID_field,func,buf,band_names=c("ID","Blue","Red","Green","Red Edge","NIR")) #pass the band_names
}
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$|\\.dat$") # Select Tif or BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing raster in folder... ",r_file))
#extractThis(r_file,zones, outFolder,ID_field,func,buf)
#extractThis(r_file,zones, outFolder,ID_field,func,buf,band_names=c("ID","Blue","Red","Green","Red Edge","NIR")) #pass the band_names for the output table - RedEdge cam
extractThis(r_file,zones, outFolder,ID_field,func,buf,band_names=c("ID","celsius")) #pass the band_names for the output table - Temperature
}
}
