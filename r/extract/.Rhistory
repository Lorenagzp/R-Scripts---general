tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing...using =Name= as ID field... ",r_file))
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing...using =Name= as ID field... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
#### setwd() You can set the Working directory to the source file location ################################################# IMPORTANT #######################
#### Get functions and libraries
source("functions_extract.R") #Check that this file is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing...using =Name= as ID field... ",r_file))
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing...using =Name= as ID field... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))},
warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
###################################################################################
#### Script to extract the values from multiband rasters based on vector zones ####
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate the selected statistics
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### setwd() You can set the Working directory to the source file location ################################################# IMPORTANT #######################
#### Get functions and libraries
source("functions_extract.R") #Check that this file is in the working directory
#require(raster)
tryCatch({ ## Put it all inside a handle error function
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing...using =Name= as ID field... ",r_file))
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing...using =Name= as ID field... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))}#,
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
#### setwd() You can set the Working directory to the source file location ################################################# IMPORTANT #######################
setwd("F:\Dropbox (RSG)\Software\Scripts\r\extract")
#### setwd() You can set the Working directory to the source file location ################################################# IMPORTANT #######################
setwd("F:\\Dropbox\\Software\\Scripts\\r\\extract")
#### Get functions and libraries
source("functions_extract.R") #Check that this file is in the working directory
tryCatch({ ## Put it all inside a handle error function
## Shapefile
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
#Extract for every input in the list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "Type the buffer size (+Positive to grow, -negative to shrink the feature)"));
}
## Ask user where to put the output tables
#tFolder <- "C:\\" Set path fix
outFolder <- choose.dir(caption = "Select folder to save output tables")
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "*.tif$") # Select only Tif files, for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing...using =Name= as ID field... ",r_file))
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing...using =Name= as ID field... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish")
},
error = function(e){print(c("Se produjo un error: ",e$message))}#,
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file is in the working directory
#require(raster)
## Ask user where to put the output tables
#outFolder <- choose.dir(caption = "Select folder to save output tables")
outFolder <- ("C:\\temp\\r") # Set path fi
rFolder <- choose.dir(caption = "Select folder that contains the TIF rasters to extract")
#list the rasters inside the folder
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$")
r_list
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$") # Select only Tif files, for example
r_list
####    - The statistic table outputs are located at in the root folder of the raster location
####
#### For  the outputs:
####  + individual file per raster with all statistics
####  + datafile with all the bands and dates extracted per field
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file is in the working directory
#require(raster)
## Ask user where to put the output tables
#outFolder <- choose.dir(caption = "Select folder to save output tables")
outFolder <- ("C:\\temp\\r") # Set path fix
tryCatch({ ## Put it all inside a handle error function
## Shapefile
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
inputList <- askCSV() # read list from file
####EXTRACT####
# run for every item in te list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],mean,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, fun=mean, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "ACTION: Type the buffer size in meters (+Positive to grow, -negative to shrink the feature)"));
}
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$") # Select Tif and BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing...using =Name= as ID field... ",r_file))
extractThis(r_file,zones, outFolder,ID_field ="Name",fun = mean,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing...using =Name= as ID field... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
}
}
print("Finish extracting")
},
error = function(e){print(c("Se produjo un error: ",e$message))}#,
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
plot(r_file)
plot(raster(r_file,band=22))
plot(zones,add=TRUE)
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file is in the working directory
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = mean,buf)
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field ="Name", fun = median,buf)
ID_field
buf
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field, fun = func,buf)
#summarize using the selected function
func <- "median" #mean #min #max
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field, fun = func,buf)
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file location
#summarize using the selected function
func <- "median" #mean #min #max
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field, fun = func,buf)
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file location
#summarize using the selected function ("na" stands for: remove NA values)
# See the functions_extract.R
func <- "median_na" #eg: mean_na
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
func
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
#summarize using the selected function ("na" stands for: remove NA values)
# See the functions_extract.R
func <- median_na #eg: mean_na
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
zones@data
names(zones@data)
#Field in the shp table to use as identifier of the extracting features
ID_field <- "Name"
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
func <- mean_na
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
#Select the CSV file with the list of inputs
#TODO: Make sure the list has valid names
inputList <- askCSV() # read list from file
inputList
inputList
do.call(function(x) file.exists(x), inputList[,1] )
inputList[,1]
do.call(function(x) print(x), inputList )
inputList[1]
file.exists(inputList[1,1])
apply(inputList_column,1,file.exists)
apply(inputList[1],1,file.exists)
apply(c(inputList[1],inputList[2]),1,file.exists)
c(inputList[1],inputList[2])
inputList[c(1,2)]
apply(inputList[c(1,2)],1,file.exists)
apply(inputList[c(1,2,3)],1,file.exists)
inputList
inputList[1,3] <- "C:\\temp"
apply(inputList[c(1,2,3)],1,file.exists)
print(inputList[c(1,2,3)]%in% check)
check <- apply(inputList[c(1,2,3)],1,file.exists)
print(inputList[c(1,2,3)]%in% check)
print(inputList[c(1,2,3)] %in% check)
print(inputList[,1:3] %in% check)
inputList[,1:3]
inputList[,1:3][check]
inputList[,1:3][!check]
check
check <- apply(inputList[,c(1:3)],1,file.exists)
check
apply(inputList[,c(1:3)],2,file.exists)
inputList[,1:3][!check]
check <- apply(inputList[,c(1:3)],2,file.exists)
inputList[,1:3][!check]
print(inputList[,1:3][!check])
any(check)
print(inputList[,1:3][!FALSE])
print(inputList[,1:3][!TRUE])
inputList[,1:3][!TRUE]
inputList[,1:3][!TRUE]==NULL
existingFiles <- apply(inputList[,c(1:3)],2,file.exists)
existingFiles
!any(existingFiles)
unexistingFiles <- !apply(inputList[,c(1:3)],2,file.exists)
unexistingFiles
inputList[,1:3][unexistingFiles]
unexistingFiles
inputList[,1:3]
unexistingFiles
print(inputList[,1:3][unexistingFiles])
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file location
inputList <- askCSV() # read list from file
if (!is.null(invalidInputFiles(inputList))) {
stop("The input list has some invalid input file name")
}
###################################################################################
#### Script to extract the values from multiband rasters (Tif, Tiff and BSQ) based on vector zones
#### Summarize the extracted pixels to give one value per zone
#### Recopilado por Lorena GonzÃ¡lez,  Septiembre 2019                          ####
####___________________________________________________________________________####
#### There are two options for the Inputs:
####  > A.
####    + A CSV file list of the raster, vector, output location and selected statistics. Headers:
####      * raster, vector_zone, output_Folder, zone_ID_field, if_buffer_size
####
####  > B.
####    + A folder that contains all rasters to process
####    + The vector to use as extraction zones
####  > C.
####    + raster
####    + vector
####
####    - Indicate:
####    - the selected statistics
####    - ID Field name
####    - And outputs location
####
#### For  the outputs:
####  + CSV file per raster with all bands plot-values
####  + datafile with all the bands and dates extracted per field
#### Get functions and libraries
source("F:\\Dropbox\\Software\\Scripts\\r\\extract\\functions_extract.R") #Check that this file location
#require(raster)
## Ask user where to put the output tables
#outFolder <- choose.dir(caption = "Select folder to save output tables")
outFolder <- ("C:\\temp\\r") # Set path fix
#summarize using the selected function ("na" stands for: remove NA values)
# See the functions_extract.R
func <- median_na ## Summarize by median, remove NA values
#func <- mean_na ## Summarize by mean, remove NA values
#Field in the shp table to use as identifier of the extracting features
ID_field <- "Name"
tryCatch({ ## Put it all inside a handle error function
## Shapefile
## Ask user the list of rasters and zone vectors
in_mode <- menu(c("CSV list of inputs", "Raster Folder and vector file","Raster File and Vector File"), title="How do you want to give the inputs?",graphics = TRUE);
##Proceed to get input as preferred
if (in_mode == 1){ #### CSV list of inputs ####
#Select the CSV file with the list of inputs
#TODO: Make sure the list has valid names
inputList <- askCSV() # read list from file
if (!is.null(invalidInputFiles(inputList))) {
stop("The input list has some invalid input file name")
}
####EXTRACT####
# run for every item in te list
for (i in 1:nrow(inputList)) {
print(paste("Processing... ",i))
extractThis(inputList[i,1],shapefile(inputList[i,2]), inputList[i,3], inputList[i,4],func,as.double(inputList[i,5])) ## r_file,zones, outFolder, ID_field, func, buf
}
} else if (in_mode == 2 || in_mode == 3){ ## Enter inputs
##Ask for the vector with the zones
zones <- askSHP()
## Ask if Buffer is necessary
buf <- 0 ## The default is no buffer
if_buf <- menu(c("No", "Yes"), title="Do you want to buffer the input vectors to extract? (Hint: Yes for points)",graphics = TRUE)
if  (if_buf == 2){
#Ask for the buffer size
##TODO: Add filters to deal with entering other than numbers for the buffer
buf <- as.double(readline(prompt = "ACTION: Type the buffer size in meters (+Positive to grow, -negative to shrink the feature)"));
}
if (in_mode == 2){ #### Process all rasters in a folder ####
## Ask user for Raster folder
rFolder <- choose.dir(caption = "Select folder that contains the rasters to extract")
#list the rasters inside the folder. Return full path name
r_list <- list.files(path = rFolder, full.names= TRUE, pattern = "\\.tif$|\\.bsq$|\\.tiff$") # Select Tif or BSQ for example
## Extract each raster
for (r_file in r_list) {
####EXTRACT####
print(paste("Processing... ",r_file))
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
if (in_mode == 3){ #### Ask for Raster file ####
####EXTRACT####
r_file <- askRaster() #Get th raster name
print(paste("Processing... ",r_file))
## Run extraction and saves output, indicate statistic
extractThis(r_file,zones, outFolder,ID_field,func,buf)
}
}
print("Finish extracting")
},
#In case of halting error:
error = function(e){print(c("Se produjo un error: ",e$message))}#,
# In case of warnings:
#warning = function(e){print(paste("Hay advertencias: ", e$message))}
)
