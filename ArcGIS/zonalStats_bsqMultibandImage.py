# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# joinZonalStats_hyper_BW_pruebas.py
# Created on: 2014-06-07 11:06:16.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: joinZonalStats_hyper_BW_pruebas <Buffer> <Stats_table> <Grid> <Zone_field_and_join_Field> <Field_Name_Calculate_field> <Expression_Calculate_field> <Expression> <band> <Raster_set> 
# Description: 
# The script is used to perform the zonals statistics tool on a multiband raster.
# The mean values are stored in the input feature (or a copy of it)
#This script takes 3 important inputs:
#Buffer: zone feature to use as input for zonal statistic tool
#Grid: feature whose table will be used to save the mean values of the zonal statistic tool.
#   This should contain the same features ID field than the "Buffer" input.
#   A field named B1, B2... will be created to store the mean values for each zone for each band. 
#image: image to use as input for zonal statistic tool, along with the "Buffer".
#   The band information is read from the envi HDR file
#Also
#
#Workspace: where to save the statistics tables and where to create the features to save the mean values per plot
#Decimals: round figure to save the mean on the features
# ---------------------------------------------------------------------------

# Import arcpy module
import os
import arcpy, arcgisscripting
import itertools
import re
import traceback, sys

def print_kwinfo():
    if deb==1:
        print "kwinfo se guarda:"
        print kwinfo

def create_if_not_exists(path):
    try:
        if not os.path.exists(path):
            os.makedirs(path)
    except Exception, e:
        # If an error occurred, print line number and error message
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)

def exists(path):
    exists = True if os.path.exists(path)else False
    return exists 

def write_hdr_file(hdr_filename,assign_bands=1,mode="w"):
    try:
        hdr_file = open(hdr_filename, mode)
        hdr_file.write("HEAD\nbands = "+ str(assign_bands))
        arcpy.AddMessage("writing in hdr file")
        hdr_file.close()
    except Exception, e:
        # If an error occurred, print line number and error message
        import traceback, sys
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)
        print "OMG! Error while in: write_hdr_file"
        raise e
def write_txt_file(hdr_filename,mode="w",txt=""):
    try:
        hdr_file = open(hdr_filename, mode)
        hdr_file.write(txt)
        arcpy.AddMessage("writing in "+hdr_filename+" file")
        hdr_file.close()
    except Exception, e:
        # If an error occurred, print line number and error message
        import traceback, sys
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)
        print "OMG! Error while in: write_txt_file"
        raise e

def replace_in_list(regex,lst):
    return [re.sub(regex, '', x).strip() for x in lst] #List comprehension
#Method to concatenate the band name to the raster basename
#BandNames has or all the list of band names or the number of bands
def getNumberOfBands(bandNames):
    try:
        #If there was no bandnames or header, a band number was assigned
        #This would be an integer
        numOfBands = int(bandNames)
        isANumber = True
        return numOfBands, isANumber
    except ValueError:
        #If there is a band name as a string we will say it's one band
        numOfBands = 1
        isANumber = False
        return numOfBands, isANumber
    except TypeError:
        #If there are band names as list or array we will count them here
        numOfBands = len(bandNames)
        isANumber = False
        return numOfBands, isANumber        
    except Exception, e:
        import traceback, sys
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)
        print "OMG!"
        raise e    
def print_dict(dictio):
    #The next line iterates, formats and prints the dictionary, key:value
    #print "\n".join('{}={}'.format(k,v) for k,v in dictio.items()) print in console
    arcpy.AddMessage("\n".join('{}={}'.format(k,v) for k,v in dictio.items()))#Print to arcmap results window
def joinZonalStatsToTable (band, tableName, bandField):
    statsTable = tablesPath + "\\" + tableName
    arcpy.AddMessage("Stats_table: " + statsTable)
    print statsTable
    Field_Name_Calculate_field = gridName + "." + bandField
    print Field_Name_Calculate_field
    #Expression_Select_layer = tableName+".Mean IS NOT NULL"
    # Use this if the stats were saved to a dbf file "\""+tableName+".Mean\" IS NOT NULL"
    # Use this if the stats were saved to a table "\""+tableName+":Mean\" IS NOT NULL"
    # Use this if the stats were saved to a database table tableName+".Mean IS NOT NULL"

    #We will save the field Mean values of the table into the feature attributes
    #The round decimals are an input from the  User
    Expression_Calculate_field = "!"+tableName+".Mean!" #Not to round
    #Expression_Calculate_field = "round(!"+tableName+".Mean!,"+ str(roundDecimals) +")"
    #the "!"+tableName+":Mean!" notation (:)is used when the stats are saved to a table
    #the "!"+tableName+".Mean!" notation (.)is used when the stats are saved to a dbf file
    print Expression_Calculate_field
    
    # Process: Zonal Statistics as Table
    arcpy.AddMessage("Zonal statistics...")
    print "Zonal statistics..."
    #Perform the zonalstatistics getting only the "MEAN" value of the cells
    #Save ALL statistics on table
    #"ALL" can be changed to get different statistics:
    #ALL,MEAN,MAJORITY,MAXIMUM,MEDIAN,MINIMUM,MINORITY,RANGE,STD,SUM,VARIETY,MIN_MAX,MEAN_STD,MIN_MAX_MEAN 
    zs = arcpy.gp.ZonalStatisticsAsTable_sa(plot_polygons, Zone_field_and_join_Field, band, statsTable, "DATA", stats)
    arcpy.AddMessage("stats table: " + str(zs))
    fields = gp.ListFields(gridLayer, bandField)
    field_found = fields.Next()
    if (not field_found):
        arcpy.AddField_management(gridLayer, bandField, "FLOAT", 10, 3, "", "", "NULLABLE", "NON_REQUIRED", "")
        arcpy.AddMessage("Added field " + str(bandField))
    else:
        arcpy.AddMessage("Field found " + str(field_found.name))
    
    # Process: Add Join
    print "Joining..."
    arcpy.AddMessage("grid..."+ gridLayer)
    arcpy.AddMessage("field..."+Zone_field_and_join_Field)
    arcpy.AddJoin_management(gridLayer, Zone_field_and_join_Field, zs, Zone_field_and_join_Field, "KEEP_ALL")    

    # Process: Select Layer By Attribute
##    if i==1:
##        print "Selecting Layer..."
##        gridLayerSelection = arcpy.SelectLayerByAttribute_management(gridLayer, "NEW_SELECTION", Expression_Select_layer)

    # Process: Calculate Field
    print "Calculating field"
    arcpy.AddMessage("Calculating field...")   
    arcpy.CalculateField_management(gridLayer, Field_Name_Calculate_field, Expression_Calculate_field, "PYTHON")

    # Process: Remove Join
    arcpy.AddMessage("remove Join")
    arcpy.RemoveJoin_management(gridLayer, "")
    #Erase stats table
    if not keep_tables: arcpy.Delete_management(zs) 
    
def letsgo(header_file,assign_bands=1):
    try:
        if not exists(header_file):
            write_hdr_file(header_file,assign_bands)
            arcpy.AddMessage("Header not found, it was created a basic one. Number of bands assigned: "+str(assign_bands))
        arcpy.AddMessage("started reading header file:" + str(header_file))
        envi_header_keywords={"acquisition time","band names","bands",
                              "bbl","byte order","class lookup","class names",
                              "classes","cloud cover","complex function",
                              "coordinate system string","data gain values",
                              "data ignore value","data offset values",
                              "data reflectance gain values","data reflectance offset values",
                              "data type","default bands","default stretch","dem band",
                              "dem file","description","file type","fwhm","geo points",
                              "header offset","interleave","lines","map info",
                              "major frame offsets","minor frame offsets","pixel size",
                              "product type","projection info","read procedures",
                              "reflectance scale factor","rpc info","samples","security tag",
                              "sensor type","solar irradiance","spectra names","sun azimuth",
                              "sun elevation","wavelength","wavelength units","x start",
                              "y start","z plot average","z plot range","z plot titles"}
        envi_header_keywords_or="|".join(envi_header_keywords)
        # Read and Iterate over the lines of the file
        with open(header_file, 'rt') as f:
            data = f.read()[5:] #Skip the first "ENVI" letters of the header
        lines = re.split(r"[\n]", data)#the info corresponding to one line
        arcpy.AddMessage("reading header lines...")
        dictio = {}
        global deb
        deb=0
        wl=[]#List to save wavelengths
        bn=[]#List to save band names
        clines=[]#complete lines with all the info corresponding to one header keyword
        ongoing=0 #Variable para marcar si se está buscando el resto de la línea de info
        #to one header keyword is not in one single line
        kwinfo=""
        for i,l in enumerate(lines):
            if deb==1: print str(i)+"-l- "+str(l)
            kwinfo+=l
            if deb==1: print str(i)+"-kwinfo- "+str(kwinfo)
            if ongoing==1:
                if "}" in l:
                    if deb==1: print "ongoing==se cierra por fin el parentesis"
                    print_kwinfo()
                    clines.append(kwinfo)
                    kwinfo=""
                    ongoing=0
                    continue
                else:
                    if deb==1: print "ongoing==1 else"
            if ongoing==0:
                ongoing=1
                for keyw in envi_header_keywords:
                    if keyw in l:
                        if deb==1: print keyw+" attribute found"
                        if "{" in l:
                            if "}" in l:
                                if deb==1: print "ongoing==parentesis cerrando en linea"
                                print_kwinfo()
                                clines.append(kwinfo)
                                kwinfo=""
                                ongoing=0
                            else:
                                if deb==1: print "if bracket in l: --- else"
                        else:
                            if deb==1: print "ongoing==sin paretesis"
                            print_kwinfo()
                            clines.append(kwinfo)
                            kwinfo=""
                            ongoing=0
            if deb==1: print "fin de ronda de for"
        for cl in clines:
            #expresion to filter how to sepatate the string.
            regexpresion = re.compile(r"""(.+?)\s*=\s*(.+)""")
            dictio.update(dict(regexpresion.findall(cl)))
            if deb==1: print regexpresion.findall(cl)
        for key in dictio: dictio[key]=dictio[key].strip()
        print "Header attributes:"
        arcpy.AddMessage("Header attributes read")
        print_dict(dictio)
        expr_replace = re.compile(r"{|}") #Expression to remove brackets below
        #wavelength
        if "wavelength" in dictio:
            wl=re.split(r"[,]", dictio["wavelength"])
            wl =replace_in_list(expr_replace,wl)
            arcpy.AddMessage(wl)
            arcpy.AddMessage("saved wl")
        #Number of Bands
        if "bands" in dictio:
            hdr_bands=dictio["bands"]
            arcpy.AddMessage(hdr_bands)
            arcpy.AddMessage("saved Number of bands from header")
        #Band names
        if "band names" in dictio:
            arcpy.AddMessage("band names attribute found")
            bn=re.split(r"[,]", dictio["band names"])
            arcpy.AddMessage("split competed")
            bn=replace_in_list(expr_replace,bn)
            arcpy.AddMessage("saved bn")
        #Next we add the wl units only if they are defined
        arcpy.AddMessage("Format composed band name")
        full_bn=hdr_bands #We assign by default the number of bands in the raster
        if "wavelength units" in dictio:
            if "band names" in dictio and "wavelength" in dictio:
                join_str = '{bandn} ({waveln} '+dictio["wavelength units"]+')' if dictio["wavelength units"]!="Unknown" else '{bandn} ({waveln})'
                arcpy.AddMessage("bn and wl found")
                full_bn= '\n'.join(join_str.format(bandn=b, waveln=w) for b,w in itertools.izip(bn, wl)).split('\n')
            if not "band names" in dictio and "wavelength" in dictio:
                join_str = '{waveln} '+dictio["wavelength units"] if dictio["wavelength units"]!="Unknown" else '{waveln}'
                arcpy.AddMessage("wl found+units")
                full_bn= '\n'.join(join_str.format(waveln=w) for w in wl).split('\n')
        else:
            if "band names" in dictio and "wavelength" in dictio:
                join_str = '{bandn} ({waveln})'
                arcpy.AddMessage("bn and wl found")
                full_bn= '\n'.join(join_str.format(bandn=b, waveln=w) for b,w in itertools.izip(bn, wl)).split('\n')
            if not "band names" in dictio and "wavelength" in dictio:
                arcpy.AddMessage("wl found")
                full_bn= wl
        arcpy.AddMessage(full_bn)
        if deb==1:
            print full_bn
            print "Bands descripted in header: "+len(full_bn)
        arcpy.AddMessage("Finished reading header") 
        arcpy.AddMessage(type(full_bn)) #to know the type of variable it was created
        return full_bn
    except Exception, e:
        # If an error occurred, print line number and error message
        import traceback, sys
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)
        print "OMG!"
        raise e
##def save_bn_wl():
##    full_bn= '\n'.join(join_str.format(bandn=b, waveln=w) for b,w in itertools.izip(bn, wl)).split('\n')
##
##def save_wl():
##    full_bn= '\n'.join(join_str.format(waveln=w) for w in itertools.izip(wl)).split('\n')
    
##--------------------------------- Starts the script
try:
    # Check out any necessary licenses
    arcpy.CheckOutExtension("spatial")

    # Create the Geoprocessor object
    gp = arcgisscripting.create()
           
    # Load required toolboxes
    print "Start!"
    #---------------------------------------
    #start----------------Input parameters
    #---------------------------------------
    #Type: Feature layer -buffer for the zonalStats
    plot_polygons = arcpy.GetParameterAsText(0)
    arcpy.AddMessage("read b1 " + plot_polygons)
    print plot_polygons

    #type: image layer
    image = arcpy.GetParameterAsText(2)
    arcpy.AddMessage("read " + image)
    desc = arcpy.Describe(image)
    rPath = desc.path
    rdate = desc.baseName[1:7] #Get the date from the raster to create the save feature
    r_img = desc.baseName[0:1] #Get the image id from the raster to create the save feature
    trialName = desc.baseName[7:10] #Get the trial id from the raster to create the save feature
    image = str(rPath) + "\\" + desc.baseName+ "." +desc.extension
    rname = desc.baseName
    arcpy.AddMessage("image source: " + image)
    print image

    ####create the feature to extract to
    ##type: Feature layer - Feature in whose table the copy of the features will be created to store the Mean stats
    wantTocopyInputFeatures = arcpy.GetParameter(10) #Choose if the input feature will be used to sava the stats or a new will be created
    if wantTocopyInputFeatures:
        folder_storing = arcpy.GetParameterAsText(1) #Where to create the copies
        Grid = str(folder_storing)+ "\\"+ r_img + rdate + plot_polygons #location and name of copy
        if not exists(Grid):
             arcpy.CopyFeatures_management(plot_polygons, Grid)#Copy feature
    else:
        Grid = plot_polygons ###Save in the input feature when not creting new feature
    arcpy.AddMessage("read " + Grid)
    desc = arcpy.Describe(Grid)
    gPath = desc.path
    gridSource = str(gPath)
    arcpy.AddMessage("Grid source: " + gridSource)
    gridName = desc.baseName
    arcpy.AddMessage("Grid basename: " + gridName)
    print Grid
    
    #type: Field - Field for join and statistics
    id_field = arcpy.GetParameterAsText(3)
    arcpy.AddMessage("read " + id_field)

    #tablesPath: tablesPath - GDB where to save the statistics tables
    tablesPath = arcpy.GetParameterAsText(4)
    arcpy.AddMessage("tablesPath " + tablesPath)

    #roundDecimals: roundDecimals - number of decimals to round the "Mean" statistics that are joined to the feature's table 
    roundDecimals = arcpy.GetParameterAsText(5)
    arcpy.AddMessage("roundDecimals: " + roundDecimals)

    #SaveStats: SaveStats - wether to save the statistics table or not 
    keep_tables = arcpy.GetParameter(7)
    arcpy.AddMessage("keep_tables: " + str(keep_tables))

    #stats: stats - a parameter for the "zonal statistics as table" tool in UPPERCASE PLEASE
    #TODO: make a selectable list of the options
    #ALL,MEAN,MAJORITY,MAXIMUM,MEDIAN,MINIMUM,MINORITY,RANGE,STD,SUM,VARIETY,MIN_MAX,MEAN_STD,MIN_MAX_MEAN
    stats = arcpy.GetParameterAsText(8)
    arcpy.AddMessage("stats to be computed: " + stats)    
    
    #KnownBands: Known number of bands in case there is no header file
    #Optional, but set to default as 1 if there is no header file
    knownBands = arcpy.GetParameterAsText(9)
    arcpy.AddMessage("known number of Bands: " + str(knownBands))
    #-----------------------------------------
    #ENDS---------------------Input parameters
    #-----------------------------------------
    
    #List of band names
    # ---------------------Reading header to get Bands
    #We assume header file is there and named as the raster
    hdr_file = os.path.join(str(rPath) + "\\" + rname+".hdr") 
    #Read header to know number and name of bands or set them a priori
    #knownBands is optional
    bandNames = letsgo(hdr_file, knownBands)
    #Default GDB to store the tables with the stats if not User input 
    #tempGdb_path = r"C:\Users\usuario\Documents\ArcGIS" 
    #tempGdb = r"Default.gdb"
    #This is the path
    #tablesPath = os.path.join(tempGdb_path, tempGdb)
    #Keep the individual stats tables?
    #Either way the MEAN is stored to the table of the grid feature selected
    #keep_tables=True     # Input as user selects 
    # Execute CreateFileGDB
    #create_if_not_exists(tempGdb_path)
    #if not exists(tablesPath):
    #    arcpy.CreateFileGDB_management(tempGdb_path, tempGdb)
    print tablesPath
        
    # Local variables:
    arcpy.AddMessage("Local variables")
    print "Local variables"
    Zone_field_and_join_Field = id_field
    gridLayer = "gridLayer"
    

    ## Make a layer
    print "Make layer"
    arcpy.MakeFeatureLayer_management(Grid, "gridLayer")

    i=1
    try:
        arcpy.AddMessage("Iterating the zonal statistics across all bands...")
        #Returns: [0]numberOfBands, [1]isBandNamesInteger?
        numOfBands = getNumberOfBands(bandNames)
        arcpy.AddMessage("Number of bands: "+str(numOfBands[0]))
        #If the image has more than one band...
        if numOfBands[0] != 1:
            #If we only have the number of bands, but no band names (because there was no hdr)...
            #We will call the bands by the default way ArcMap does: RasterName + Band_1, Band_2, etc...
            #we create the list to iterate it
            if numOfBands[1]: bandNames = list('Band_%s' % b for b in range(1, numOfBands[0]+1))
            #Here iterates through the bands and runs the zonal statistics tool
            for b in bandNames:
                #Next we add the band name to the raster basename
                band = image + "\\" + b
                arcpy.AddMessage("Iterating band # " + band)
                bandField = "B" + str(i)
                print bandField
                #Set table name
                tableName = gridName+ trialName + bandField #+ ".dbf"
                #Here we call the method to do the zonal statistics and join the mean to the feature table
                joinZonalStatsToTable (band, tableName, bandField)
                i+=1 
        else:
            #If we have just one band we call the raster without specifying any band
            band = image
            bandField = "B1"
            tableName = gridName+ trialName
            #Here we call the method to do the zonal statistics and join the mean to the feature table
            joinZonalStatsToTable (band, tableName, bandField)

            ###Experiment to see which ended well
            check=r'C:\\vuelos\\temp\\g.txt'
            write= "Finished "+str(band)+" with "+ str(tableName)+"\n"
            write_txt_file(check,"a",write)
            ##Experiment
    except Exception, e:
        # If an error occurred, print line number and error message
        import traceback, sys
        tb = sys.exc_info()[2]
        arcpy.AddMessage("Line:" + str(tb.tb_lineno))
        arcpy.AddMessage("Error " + e.message)
        print "OMG!"
        raise e
    f="Finish"
    print f
    arcpy.SetParameterAsText(6,f)

except Exception, e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    arcpy.AddMessage("Line:" + str(tb.tb_lineno))
    arcpy.AddMessage("Error " + e.message)
    print "OMG!"