# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# joinZonalStats_hyper_BW_pruebas.py
# Created on: 2014-06-07 11:06:16.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: joinZonalStats_hyper_BW_pruebas <Buffer> <Stats_table> <Grid> <Zone_field_and_join_Field> <Field_Name_Calculate_field> <Expression_Calculate_field> <Expression> <band> <Raster_set> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import os
import arcpy, arcgisscripting
import itertools
import re

def print_kwinfo():
    if deb==1:
        print "kwinfo se guarda:"
        print kwinfo

def replace_in_list(regex,lst):
    return [re.sub(regex, '', x).strip() for x in lst] #List comprehension

def print_dict(dictio):
    #The next line iterates, formats and prints the dictionary, key:value
    print "\n".join('{}={}'.format(k,v) for k,v in dictio.items())

def letsgo(header_file):
    envi_header_keywords={"acquisition time","band names","bands",
                          "bbl","byte order","class lookup","class names",
                          "classes","cloud cover","complex function",
                          "coordinate system string","data gain values",
                          "data ignore value","data offset values",
                          "data reflectance gain values","data reflectance offset values",
                          "data type","default bands","default stretch","dem band",
                          "dem file","description","file type","fwhm","geo points",
                          "header offset","interleave","lines","map info",
                          "major frame offsets","minor frame offsets","pixel size",
                          "product type","projection info","read procedures",
                          "reflectance scale factor","rpc info","samples","security tag",
                          "sensor type","solar irradiance","spectra names","sun azimuth",
                          "sun elevation","wavelength","wavelength units","x start",
                          "y start","z plot average","z plot range","z plot titles"}
    envi_header_keywords_or="|".join(envi_header_keywords)

    # Read and Iterate over the lines of the file
    with open(header_file, 'rt') as f:
        data = f.read()[5:]
    lines = re.split(r"[\n]", data)#the info corresponding to one line
    dictio = {}
    global deb
    deb=0
    wl=[]#List to save wavelengths
    bn=[]#List to save band names
    clines=[]#complete lines with all the info corresponding to one header keyword
    ongoing=0 #Variable para marcar si se está buscando el resto de la línea de info
    #to one header keyword is not in one single line
    kwinfo=""
    for i,l in enumerate(lines):
        if deb==1: print str(i)+"-l- "+str(l)
        kwinfo+=l
        if deb==1: print str(i)+"-kwinfo- "+str(kwinfo)
        if ongoing==1:
            if "}" in l:
                if deb==1: print "ongoing==se cierra por fin el parentesis"
                print_kwinfo()
                clines.append(kwinfo)
                kwinfo=""
                ongoing=0
                continue
            else:
                if deb==1: print "ongoing==1 else"
        if ongoing==0:
            ongoing=1
            for keyw in envi_header_keywords:
                if keyw in l:
                    if deb==1: print keyw+" attribute found"
                    if "{" in l:
                        if "}" in l:
                            if deb==1: print "ongoing==parentesis cerrando en linea"
                            print_kwinfo()
                            clines.append(kwinfo)
                            kwinfo=""
                            ongoing=0
                        else:
                            if deb==1: print "if bracket in l: --- else"
                    else:
                        if deb==1: print "ongoing==sin paretesis"
                        print_kwinfo()
                        clines.append(kwinfo)
                        kwinfo=""
                        ongoing=0
        if deb==1: print "fin de ronda de for"
    for cl in clines:
        #expresion to filter how to sepatate the string.
        regexpresion = re.compile(r"""(.+?)\s*=\s*(.+)""")
        dictio.update(dict(regexpresion.findall(cl)))
        if deb==1: print regexpresion.findall(cl)
    for key in dictio: dictio[key]=dictio[key].strip()
    print "Header attributes:"
    print_dict(dictio)
    #Now we save to a list what the wavelengt name info
    expr_replace = re.compile(r"{|}") #Expression to remove brackets below
    #wavelength
    wl=re.split(r"[,]", dictio["wavelength"])
    wl =replace_in_list(expr_replace,wl)
    #Band names
    bn=re.split(r"[,]", dictio["band names"])
    bn=replace_in_list(expr_replace,bn)
    #Next we add the wl units only if they are defined
    join_str = '{bandn} ({waveln} '+dictio["wavelength units"]+')' if dictio["wavelength units"]!="Unknown" else '{bandn} ({waveln})'
    full_bn= '\n'.join(join_str.format(bandn=b, waveln=w) for b,w in itertools.izip(bn, wl)).split('\n')
    if deb==1:
        print full_bn
        print "Bands: "+len(full_bn)
    return full_bn

##        Starts the script
try:
    # Check out any necessary licenses
    arcpy.CheckOutExtension("spatial")

    # Create the Geoprocessor object
    gp = arcgisscripting.create()

    #workspace

    bwPath = "D:\\AB2013-2014\\PA"
    bwVectoresPath = bwPath + "\\" + "vectoriales"
    bwDataPath = bwPath + "\\" + "data"
    bwGdbPath = bwVectoresPath + "\\" + "EM38.gdb"
    tempGdb = "C:\\vuelos\\temp.gdb"
    arcpy.env.workspace = bwPath
           
    # Load required toolboxes
    print "Start!"
    #Type: Feature layer
    bf_Lx_1 = arcpy.GetParameterAsText(0)
    L_merge = bf_Lx_1
    arcpy.AddMessage("read b1 " + bf_Lx_1)
    print bf_Lx_1

    #type: Feature layer
    Grid = arcpy.GetParameterAsText(1)
    #gridName = "H140117_BW"
    #Grid = bwGdbPath + "\\" + gridName 
    arcpy.AddMessage("read " + Grid)
    desc = arcpy.Describe(Grid)
    gPath = desc.path
    gridSource = str(gPath) + "\\" + Grid
    arcpy.AddMessage("Grid source: " + gridSource)
    gridName = desc.baseName
    arcpy.AddMessage("Grid basename: " + gridName)
    
    print Grid
    #type: Raster layer
    Raster = arcpy.GetParameterAsText(2)
    #Raster = "E:\\140117\\140117H\\ortho\\140117_3_810.bsq" # provide a default value if unspecified
    #Raster = "c:\\vuelos\\140117_3_810.bsq"
    arcpy.AddMessage("read " + Raster)
    desc = arcpy.Describe(Raster)
    rPath = desc.path
    Raster = str(rPath) + "\\" + desc.baseName+ "." +desc.extension
    arcpy.AddMessage("Raster source: " + Raster)
    print Raster

    #List of band names
    hdr_file = os.path.join(str(rPath) + "\\" + desc.baseName+".hdr") 
    bandNames = letsgo(hdr_file)

    #Folder to store the tables with the bands  
    #type: Geodatabase
    #tablesPath = arcpy.GetParameterAsText(5) 
    tablesPath = tempGdb
    print tablesPath
        
    # Local variables:
    arcpy.AddMessage("Local variables")
    print "Local variables"
    Zone_field_and_join_Field = "PointID"
    gridLayer = "gridLayer"
    

    ## Make a layer
    print "Make layer"
    arcpy.MakeFeatureLayer_management(Grid, "gridLayer")

    i=1
    for b in bandNames:
        arcpy.AddMessage("b: " + b)
        band = Raster + "\\" + b
        arcpy.AddMessage("band: " + band)
        bandField = "B" + str(i)
        print bandField
        #Set table name
        tableName = gridName + "_" + bandField #+ ".dbf"
        L_Stats_table = tablesPath + "\\" + tableName
        print L_Stats_table
        Field_Name_Calculate_field = gridName + "." + bandField
        print Field_Name_Calculate_field
        Expression_Select_layer = tableName+".Mean IS NOT NULL"
        # Use this if the stats were saved to a dbf file "\""+tableName+".Mean\" IS NOT NULL"
        # Use this if the stats were saved to a table "\""+tableName+":Mean\" IS NOT NULL"
        # Use this if the stats were saved to a database table tableName+".Mean IS NOT NULL"
        print Expression_Select_layer
        Expression_Calculate_field = "round(!"+tableName+".Mean!,0)"
        #the "!"+tableName+":Mean!" notation (:)is used when the stats are saved to a table
        #the "!"+tableName+".Mean!" notation (.)is used when the stats are saved to a dbf file
        print Expression_Calculate_field
        
        

        # Process: Zonal Statistics as Table
        print "Zonal statistics..."
        zs = arcpy.gp.ZonalStatisticsAsTable_sa(L_merge, Zone_field_and_join_Field, band, L_Stats_table, "DATA", "MEAN")
        arcpy.AddMessage("stats table: " + str(zs))
        
        fields = gp.ListFields(gridLayer, bandField)
        field_found = fields.Next()
        arcpy.AddMessage("field_found " + str(field_found))
        if (not field_found):
            arcpy.AddField_management(gridLayer, bandField, "FLOAT", 10, 3, "", "", "NULLABLE", "NON_REQUIRED", "")
            arcpy.AddMessage("Added. Before field not found " + str(bandField))
        else:
            arcpy.AddMessage("field found " + str(bandField))
        
        # Process: Add Join
        print "Joining..."
        arcpy.AddMessage("grid..."+ gridLayer)
        arcpy.AddMessage("field..."+Zone_field_and_join_Field)
        arcpy.AddJoin_management(gridLayer, Zone_field_and_join_Field, zs, Zone_field_and_join_Field, "KEEP_ALL")    

        # Process: Select Layer By Attribute
        if i==1:
            print "Selecting Layer..."
            gridLayerSelection = arcpy.SelectLayerByAttribute_management(gridLayer, "NEW_SELECTION", Expression_Select_layer)

        # Process: Calculate Field
        print "Calculating field"
        arcpy.AddMessage("Calculating field...")   
        arcpy.CalculateField_management(gridLayerSelection, Field_Name_Calculate_field, Expression_Calculate_field, "PYTHON")

        # Process: Remove Join
        arcpy.AddMessage("remove Join")
        arcpy.RemoveJoin_management(gridLayer, "")
        #Erase stats table
        arcpy.Delete_management(zs)        
        i+=1
              
    print "Finish"

except Exception, e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    arcpy.AddMessage("Line:" + str(tb.tb_lineno))
    print "Line %i" % tb.tb_lineno
    arcpy.AddMessage("Error " + e.message)
    print e.message
    print "OMG!"
  

