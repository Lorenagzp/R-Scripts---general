# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# CalculateNDVIandNiblackFromHyperIterate.py
# Created on: 2015-08-31 23:45:21.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: CalculateNDVIandNiblackFromHyperIterate <raster> <ndvi> <NIR_wl> <RED_wl> <niblack> <Dark_background> <Neighborhood> <truncate_charsEnd> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, os

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

#Method to truncate string
def getBasename(inputName, fromChar, toChar):
    subsetName = inputName[fromChar:int(toChar)]
    arcpy.AddMessage("Truncated name: "+subsetName)
    return subsetName

def upLevel(locationpath):
    #Up one level the path
    folderUp = "\\".join(locationpath.split("\\")[0:-1])
    folderUp.replace("\\", "\\\\")
    return folderUp
	
def checkFolder(folderPath):
#Create folder if it doesnt exists
    folderPath.replace("\\", "\\\\")
    if not os.path.exists(folderPath):
       os.makedirs(folderPath)

# Script arguments
raster = arcpy.GetParameterAsText(0)

truncate_charsEnd = arcpy.GetParameterAsText(1)
if truncate_charsEnd == '#' or not truncate_charsEnd:
    truncate_charsEnd = "-3" # provide a default value if unspecified

# Process: Parse Path
desc = arcpy.Describe(raster)
name = desc.name
arcpy.AddMessage("name: "+name)
path = desc.path
arcpy.AddMessage("path: "+path)
folderUp = upLevel(path)
saveFolder = folderUp+"\\mask"
checkFolder(saveFolder) #Check if exists

# Process: truncateString to get basename
basename = getBasename(name,0,truncate_charsEnd)

ndvi = arcpy.GetParameterAsText(7)
if ndvi == '#' or not ndvi:
    ndvi = saveFolder+"\\"+basename+"nvi.tif" # provide the automatic value unless other is indicated

NIR_wl = arcpy.GetParameterAsText(2)
if NIR_wl == '#' or not NIR_wl:
    NIR_wl = "802.79626" # provide a default value if unspecified

RED_wl = arcpy.GetParameterAsText(3)
if RED_wl == '#' or not RED_wl:
    RED_wl = "670.17230" # provide a default value if unspecified

niblack = arcpy.GetParameterAsText(4)
if niblack == '#' or not niblack:
    niblack = saveFolder+"\\"+basename+"msk.tif" # provide the automatic value unless other is indicated
	
Dark_background = arcpy.GetParameterAsText(5)
if Dark_background == '#' or not Dark_background:
    Dark_background = "true" # provide a default value if unspecified

Neighborhood = arcpy.GetParameterAsText(6)
if Neighborhood == '#' or not Neighborhood:
    Neighborhood = "Rectangle 3 3 CELL" # provide a default value if unspecified



# Local variables:
focalSTD = "C:\Users\usuario\Documents\ArcGIS\Default.gdb\std"
focalMEAN = "C:\Users\usuario\Documents\ArcGIS\Default.gdb\mean"

#Assign names

NIR_path = raster+"\\"+NIR_wl
RED_path = raster+"\\"+RED_wl


# Process: Raster Calculator
arcpy.gp.RasterCalculator_sa("Float((Float(\""+NIR_path+"\") - Float(\""+RED_path+"\"))/(Float(\""+NIR_path+"\") + Float(\""+RED_path+"\")))", ndvi)

# Process: Focal MEAN 3x3
arcpy.gp.FocalStatistics_sa(ndvi, focalMEAN, Neighborhood, "MEAN", "DATA")

# Process: Focal STD 3x3
arcpy.gp.FocalStatistics_sa(ndvi, focalSTD, Neighborhood, "STD", "DATA")

# Process: calculate Nib
#######REEEROOR
arcpy.gp.RasterCalculator_sa("Con("+Dark_background+" == true,Con(\"Float("+ndvi+")\">(\"Float("+focalMEAN+")\" +(0.2 * \"Float("+focalSTD+")\")),1,0),Con(\"Float("+ndvi+")\">(\"Float("+focalMEAN+")\" +(Float(-0.2) * \"Float("+focalSTD+")\")),1,0))", niblack)
#Delete temporals
arcpy.Delete_management(FocalSTD)
arcpy.Delete_management(FocalMEAN)
